
 # ***** BEGIN LICENSE BLOCK *****
 # Version: MPL 1.1/GPL 2.0/LGPL 2.1
 #
 # The contents of this file are subject to the Mozilla Public License Version
 # 1.1 (the "License"); you may not use this file except in compliance with
 # the License. You may obtain a copy of the License at
 # http://www.mozilla.org/MPL/
 #
 # Software distributed under the License is distributed on an "AS IS" basis,
 # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 # for the specific language governing rights and limitations under the
 # License.
 #
 # The Original Code is cmgui
 #
 # The Initial Developer of the Original Code is
 # Auckland Uniservices Ltd, Auckland, New Zealand.
 # Portions created by the Initial Developer are Copyright (C) 2005
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s): 
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK ***** */

# Base CMakeLists.txt file

# Set the minimum version of cmake required to 2.6
CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( ImageMagick )

MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )
	
	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )

MACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	SET( ${OPTION_NAME} "${OPTION_DEFAULT}" CACHE ${OPTION_TYPE} "${OPTION_STRING}" )
ENDMACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )

SET( IMAGEMAGICK_NAMESPACE_NAME ImageMagick )

# Set up library options
# Generic library options
CACHE_VAR_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_TYPE "Release" STRING 
	"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel" )
SET( CMAKE_BUILD_TYPE ${${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_TYPE} CACHE
	INTERNAL "Internalise this variable and manipulate with
	${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_TYPE" FORCE )
CACHE_VAR_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_INSTALL_PREFIX
	"${CMAKE_INSTALL_PREFIX}" PATH 
	"Install path prefix, prepended onto install directories." )
SET( CMAKE_INSTALL_PREFIX ${${IMAGEMAGICK_NAMESPACE_NAME}_INSTALL_PREFIX}
	CACHE INTERNAL "Internalise this variable and manipulate with
	${IMAGEMAGICK_NAMESPACE_NAME}_INSTALL_PREFIX" FORCE )
CACHE_VAR_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_MAGICKCORE_QUANTUM_DEPTH 16 STRING "Set Quantum depth (8/16/32/64)" )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_STATIC_LIB "Build static ImageMagick lib" TRUE )

# Specific library options
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_MODULE_SUPPORT "ImageMagick module support" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_HDRI "ImageMagick High Dynamic Range Imagery" FALSE )
# Delegate configuration
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_BZip2 "Build ImageMagick with bzip2" TRUE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_DJVU "Build ImageMagick with djvu" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_DPS "Build ImageMagick with dps" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_FLASHPIX "Build ImageMagick with flash pix" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_FONTCONFIG "Build ImageMagick with fontconfig" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_FREETYPE "Build ImageMagick with freetype" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_GS "Build ImageMagick with ghostscript" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_GRAPHVIS "Build ImageMagick with graph vis" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_JBIG "Build ImageMagick with jbig" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_JPEG "Build ImageMagick with jpeg" TRUE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_JP2 "Build ImageMagick with jpeg-2000" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_LCMS "Build ImageMagick with lcms" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_LQR "Build ImageMagick with lqr" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_MAGICKPP "Build ImageMagick with magick++" TRUE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_OPENEXR "Build ImageMagick with openexr" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_PERL "Build ImageMagick with perl" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_PNG "Build ImageMagick with png" TRUE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_RSVG "Build ImageMagick with rsvg" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_TIFF "Build ImageMagick with tiff" TRUE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_WINGDI32 "Build ImageMagick with fwindows gdi 32" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_WMF "Build ImageMagick with wmf" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_X11 "Build ImageMagick with X11" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_XML "Build ImageMagick with xml" FALSE )
OPTION_WITH_DEFAULT( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_ZLIB "Build ImageMagick with zlib" TRUE )

SET( MAGICK_MAJOR_VERSION 6 )
SET( MAGICK_MINOR_VERSION 7 )
SET( MAGICK_PATCH_VERSION 0 )

ADD_DEFINITIONS( -D_LIB -DNeedFunctionPrototypes )
IF( MSVC )
	ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS -D_CRT_NOSTDC_NO_WARNINGS )
	# ADD_DEFINITIONS( -D_VISUALC_ ) # <-- Could add this but it seems to only be there to pump out messages
	SET( CMAKE_MFC_FLAG 0 )
ENDIF( MSVC )
IF( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_STATIC_LIB )
	SET( LIBRARY_BUILD_TYPE STATIC )
	SET( LIBRARY_INSTALL_TYPE ARCHIVE )
ELSE( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_STATIC_LIB )
	SET( LIBRARY_BUILD_TYPE SHARED )
	SET( LIBRARY_INSTALL_TYPE LIBRARY )
	IF( WIN32 )
		SET( LIBRARY_INSTALL_TYPE RUNTIME )
	ENDIF( WIN32 )
ENDIF( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_STATIC_LIB )

SET( CMAKE_DEBUG_POSTFIX "d" )
IF( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_STATIC_LIB )
	SET( CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX} )
ENDIF( ${IMAGEMAGICK_NAMESPACE_NAME}_BUILD_STATIC_LIB )

IF( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_BZip2 )
	FIND_PACKAGE( BZip2 REQUIRED )
	MESSAGE( STATUS "%% BZIP2 ${BZIP2_INCLUDE_DIR} %%" )
	#SET( CODERS_DEPENDENT_LIBRARIES ${CODERS_DEPENDENT_LIBRARIES} ${BZIP2_LIBRARIES} )
	INCLUDE_DIRECTORIES( ${BZIP2_INCLUDE_DIR} )
ENDIF( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_BZip2 )
IF( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_ZLIB )
	FIND_PACKAGE( ZLIB REQUIRED )
	MESSAGE( STATUS "%% ZLIB ${ZLIB_INCLUDE_DIR} %%" )
	INCLUDE_DIRECTORIES( ${ZLIB_INCLUDE_DIR} )
	#SET( CODERS_DEPENDENT_LIBRARIES ${CODERS_DEPENDENT_LIBRARIES} ${ZLIB_LIBRARIES} )
ENDIF( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_ZLIB )
IF( ${IMAGEMAGICK_NAMESPACE_NAME}_HDRI )
	SET( HDRI_SUPPORT 1 )
ENDIF( ${IMAGEMAGICK_NAMESPACE_NAME}_HDRI )

SET( INC_INSTALL_DIR include/${IMAGEMAGICK_NAMESPACE_NAME} )
SET( IMAGEMAGICK_WITH_VERSION ${IMAGEMAGICK_NAMESPACE_NAME}-${MAGICK_MAJOR_VERSION}.${MAGICK_MINOR_VERSION}.${MAGICK_PATCH_VERSION} )
SET( LIB_INSTALL_DIR lib/${IMAGEMAGICK_WITH_VERSION}/modules-Q${${IMAGEMAGICK_NAMESPACE_NAME}_MAGICKCORE_QUANTUM_DEPTH} )
SET( LIBRARY_PATH \"${CMAKE_INSTALL_PREFIX}/lib/${IMAGEMAGICK_WITH_VERSION}\" )
SET( LIBRARY_RELATIVE_PATH \"${IMAGEMAGICK_WITH_VERSION}\" )
SET( SHARE_RELATIVE_PATH \"${IMAGEMAGICK_WITH_VERSION}\" )
SET( CONFIGURE_RELATIVE_PATH \"${IMAGEMAGICK_WITH_VERSION}/config\" )
SET( SHARE_CONFIGURE_RELATIVE_PATH \"${IMAGEMAGICK_WITH_VERSION}/config\" )
SET( PACKAGE_NAME \"ImageMagick\" )

# Configure platform
INCLUDE( ConfigureChecks.cmake )

SET( MAGICK_TARGET_NAME MagickCore )
SET( MAGICKPP_TARGET_NAME Magickpp )
SET( LIBRARY_TARGET_NAME ${MAGICK_TARGET_NAME} )
ADD_SUBDIRECTORY( magick )
IF ( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_MAGICKPP )
	SET( LIBRARY_TARGET_NAME ${MAGICKPP_TARGET_NAME} )
	ADD_SUBDIRECTORY( Magick++ )
ENDIF ( ${IMAGEMAGICK_NAMESPACE_NAME}_WITH_MAGICKPP )

INSTALL( EXPORT ${IMAGEMAGICK_NAMESPACE_NAME}-targets DESTINATION lib/cmake )

SET( CONFIG_FILE_CONTENTS 
	"\nGET_FILENAME_COMPONENT( SELF_DIR \"\${CMAKE_CURRENT_LIST_FILE}\" PATH )"
	"\nINCLUDE( \${SELF_DIR}/${IMAGEMAGICK_NAMESPACE_NAME}-targets.cmake )"
	"\nGET_FILENAME_COMPONENT( ${IMAGEMAGICK_NAMESPACE_NAME}_INCLUDE_DIRS \"\${SELF_DIR}/../../include/ImageMagick\" ABSOLUTE )"
	"\nSET( ${IMAGEMAGICK_NAMESPACE_NAME}_LIBRARIES ${MAGICK_TARGET_NAME} ${MAGICKPP_TARGET_NAME} )"
	"\nSET( ${IMAGEMAGICK_NAMESPACE_NAME}_FOUND TRUE )" 
	"\n" )

SET( CONFIG_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/${IMAGEMAGICK_NAMESPACE_NAME}-config.cmake )
FILE( WRITE ${CONFIG_FILE_NAME} ${CONFIG_FILE_CONTENTS} )
INSTALL( FILES ${CONFIG_FILE_NAME} DESTINATION lib/cmake )

